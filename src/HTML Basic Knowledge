1.  HTML: Hyper Text Markup Language
    HTML5: HTML + CSS

2.  Different between http and https:
        a>  HTTP: Hyper Text Transfer Protocol

        b>  HTTP    Unsecured; Port Number 80,  Operates at Application Layer
            HTTPS   Secured;  Port Number 443, Operates at transport Layer
        c>  HTTP:   No SSL certificates are required
            HTTPS:  Required SSl Certificates
        d>  HTTP:   No Encryption
            HTTPS:  Encryption


3.  Server: PC(xxx.com) -> Web Server
    Client(Request): laptop(Chrome Browser)

4.  Different between HTML and HTML5?
        a> HTML5 is a version of HTML.

5.  textBox: Not Resizable -> Single Line
    textarea: Resizable -> Multi lines

6.  Can we have one more form in one page?

7.  Different between Text_box and textarea?
        a>

8. Selector:
    a> Basic Selector:
        1: #div1{color: red} -> id选择器
        2: div{color: green} -> element selector
        3: .p{color: black}  -> class selector
    b>
        1:  div,p{}
        2:  div p{color: red;} -> 子选择器
        3:  div > p{}父选择器
    c>
        input[type='text']{ border: 5px solid;}

9. Css 属性:
    a> font: line-height: 行高
             border： 边框
             text-align： 对齐方式

10. 盒子模型：
    a>  margin: 外边距
    b>  padding: 外边距
    c>  box-sizing: border-box; 盒子属性,最终大小不变
    d>  float: left, right, center


11. JavaScript:
    a> <script src:"../js.html"></script>
    b>  数据类型
        1:  number      ->  int, float, NaN
        2:  string      ->  "abc", 'abc'
        3.  boolean     ->  true false
        4.  null        ->
        5.  undefined   ->
    c> 变量
        1.  String -> number:           type is number,  不能直接视为数字，进行加减会return NaN
        2.  boolean -> number:          true: 1; false: 0
        3.  number  -> boolean:         0 || Nan: true;    others: true;
        4.  string  -> boolean:         空字符串: false;    other: true
        5.  null&undefined -> boolean:
        6.  object -> boolean:
    d> 比较：
        1.  “abc” > "acd"   ->  false
        2.  '123' == 123    ->  true
        3.  flag = true     ->  !flag : false

    e>  三元运算： a > b ? 1 : 0
    f>  ===: equal value and equal type
        !==: Not equal value or not equal type
    g>  "use strict" -> the variable must be declare, cannot be deleted

    h>  Event: onload, Event happened after all page loaded.

    i>   let is a keyword: {let x }
            x cannot be used outside the block
    j>  setInterval(function, 3000) -> 每隔3000ms运行一次function

    k>  async / await:
            1>  In async function: await 接着then()
            2>  resolve is a function. similar return. only in Promise.

    

12. Log:
    console.log()   -> backend show
    document.write() -> Font show

13. BOM: Browser Object Model

14. Picture tag: Different size of browser show different picture.

15. <progress>  -> can show progress

16. <input type="text" id="username" required pattern="[a-zA-Z0-9]{6,12}">

17. Add notify:
        document.getElementById("ss").addEventListener('invalid', function(e){
            if(input.validity.valueMissing){
                e.target.setCustomValidity("Cannot be Empty");
            }
            else if(!input.validity.valid){
                        e.target.setCustomValidity("doesnot satify the format")
            });

18. AJAX:
    a>  AJAX is not a programming language
        is a technique for access web servers from a web page
        stands for Asynchronous JS and XML..

19. promise:  not immediately but eventually
    resolve:

    The await expression causes async function execution to pause until
    a Promise is settled (that is, fulfilled or rejected),
    and to resume execution of the async function after fulfillment.
    When resumed,
    the value of the await expression is that of the fulfilled Promise.

20. JQuery
        a>  jq -> js: Object jp[index],  or Object jq.get(index)
            js -> jq: $(Object js)
        b>  $(function (){})  -> similar to  window.onload(){}
            different: onload() -> 仅能用一次。
                        $(function) can be excuted many times.
        c> Selector

21. JSON: JavaScript Object Notation
        a>  JSON is a lightweight data-interchge format
                 is "self-describing" and easy to understand
                 is language independent *
         b> JSON using jS syntax but JSON format is text only. It can easily be sent to and from a server. And used as a data format by any programming language.


06.10