1.  HTML: Hyper Text Markup Language
    HTML5: HTML + CSS

2.  Different between http and https:
        a>  HTTP: Hyper Text Transfer Protocol

        b>  HTTP    Unsecured; Port Number 80,  Operates at Application Layer
            HTTPS   Secured;  Port Number 443, Operates at transport Layer
        c>  HTTP:   No SSL certificates are required
            HTTPS:  Required SSl Certificates
        d>  HTTP:   No Encryption
            HTTPS:  Encryption


3.  Server: PC(xxx.com) -> Web Server
    Client(Request): laptop(Chrome Browser)

4.  Different between HTML and HTML5?
        a> HTML5 is a version of HTML.

5.  textBox: Not Resizable -> Single Line
    textarea: Resizable -> Multi lines

6.  Can we have one more form in one page?

7.  Different between Text_box and textarea?
        a>

8. Selector:
    a> Basic Selector:
        1: #div1{color: red} -> id选择器
        2: div{color: green} -> element selector
        3: .p{color: black}  -> class selector
    b>
        1:  div,p{}
        2:  div p{color: red;} -> 子选择器
        3:  div > p{}父选择器
    c>
        input[type='text']{ border: 5px solid;}

9. Css 属性:
    a> font: line-height: 行高
             border： 边框
             text-align： 对齐方式

10. 盒子模型：
    a>  margin: 外边距
    b>  padding: 外边距
    c>  box-sizing: border-box; 盒子属性,最终大小不变
    d>  float: left, right, center


11. JavaScript:
    a> <script src:"../js.html"></script>
    b>  数据类型
        1:  number      ->  int, float, NaN
        2:  string      ->  "abc", 'abc'
        3.  boolean     ->  true false
        4.  null        ->
        5.  undefined   ->
    c> 变量
        1.  String -> number:           type is number,  不能直接视为数字，进行加减会return NaN
        2.  boolean -> number:          true: 1; false: 0
        3.  number  -> boolean:         0 || Nan: true;    others: true;
        4.  string  -> boolean:         空字符串: false;    other: true
        5.  null&undefined -> boolean:
        6.  object -> boolean:
    d> 比较：
        1.  “abc” > "acd"   ->  false
        2.  '123' == 123    ->  true
        3.  flag = true     ->  !flag : false

    e>  三元运算： a > b ? 1 : 0
    f>  ===: equal value and equal type
        !==: Not equal value or not equal type
    g>  "use strict" -> the variable must be declare, cannot be deleted

    h>  Event: onload, Event happened after all page loaded.

    i>   let is a keyword: {let x }
            x cannot be used outside the block
    j>  setInterval(function, 3000) -> 每隔3000ms运行一次function

    k>  async / await:
            1>  In async function: await 接着then()
            2>  resolve is a function. similar return. only in Promise.

    

12. Log:
    console.log()   -> backend show
    document.write() -> Font show

13. BOM: Browser Object Model

14. Picture tag: Different size of browser show different picture.

15. <progress>  -> can show progress

16. <input type="text" id="username" required pattern="[a-zA-Z0-9]{6,12}">

17. Add notify:
        document.getElementById("ss").addEventListener('invalid', function(e){
            if(input.validity.valueMissing){
                e.target.setCustomValidity("Cannot be Empty");
            }
            else if(!input.validity.valid){
                        e.target.setCustomValidity("doesnot satify the format")
            });

18. AJAX:
    a>  AJAX is not a programming language
        is a technique for access web servers from a web page
        stands for Asynchronous JS and XML..

19. promise:  not immediately but eventually
    resolve:

    The await expression causes async function execution to pause until
    a Promise is settled (that is, fulfilled or rejected),
    and to resume execution of the async function after fulfillment.
    When resumed,
    the value of the await expression is that of the fulfilled Promise.

20. JQuery
        a>  jq -> js: Object jp[index],  or Object jq.get(index)
            js -> jq: $(Object js)
        b>  $(function (){})  -> similar to  window.onload(){}
            different: onload() -> 仅能用一次。
                        $(function) can be excuted many times.
        c> Selector
            1. 基本选择器
        			1. 标签选择器    $("html标签名") 获得所有匹配标签名称的元素
        			2. id选择器      $("#id的属性值") 获得与指定id属性值匹配的元素
        			3. 类选择器      $(".class的属性值") 获得与指定的class属性值匹配的元素
        			4. 并集选择器    $("选择器1,选择器2....") 获取多个选择器选中的所有元素
            2. 层级选择器
       				1. 后代选择器    $("A B ") 选择A元素内部的所有B元素
       				2. 子选择器      $("A > B") 选择A元素内部的所有B子元素
        	3. 属性选择器
        			1. 属性名称选择器  $("A[属性名]") 包含指定属性的选择器
        			2. 属性选择器      $("A[属性名='值']") 包含指定属性等于指定值的选择器
        			3. 复合属性选择器  $("A[属性名='值'][]...") 包含多个属性条件的选择器
        	4. 过滤选择器
        			1. 首元素选择器   :first 获得选择的元素中的第一个元素
       				2. 尾元素选择器   :last 获得选择的元素中的最后一个元素
       				3. 非元素选择器   :not(selector) 不包括指定内容的元素
        			4. 偶数选择器     :even 偶数，从 0 开始计数
        	    	5. 奇数选择器     :odd 奇数，从 0 开始计数
        			6. 等于索引选择器  :eq(index) 指定索引元素
        			7. 大于索引选择器  :gt(index) 大于指定索引元素
       				8. 小于索引选择器  :lt(index) 小于指定索引元素
       				9. 标题选择器      :header 获得标题（h1~h6）元素，固定写法
        	5. 表单过滤选择器
        			1. 可用元素选择器    :enabled 获得可用元素
        			2. 不可用元素选择器  :disabled 获得不可用元素
        			3. 选中选择器        :checked 获得单选/复选框选中的元素
        			4. 选中选择器        :selected 获得下拉框选中的元素
        d> DOM
        	1. 内容操作
        			1. html(): Get the HTML contents of the first element in the set of matched elements.
        			2. text(): Get the text content
        			3. val()： Get the current value
        	2. 属性操作
        			1. 通用属性操作
        				1. attr():  Get the value of an attribute
        				2. removeAttr():删除属性
        				3. prop():  Get the value of a property
        				4. removeProp():删除属性
        				* attr和prop区别？
        					1. 固有属性，建议使用prop
        					2. 自定义的属性，建议使用attr

        			2. 对class属性操作
        				1. addClass():添加class属性值
        				2. removeClass():删除class属性值
        				3. toggleClass():切换class属性
        				4. css():
        	3. CRUD操作:
        			1. e.append(): Add at the end of e
        			2. e.appendTo(): Add e to the end of the list
        			3. e.prepend(): Add at the start of e
        			4. e.prependTo()： Add e to the start of the list
        			5. after():添加元素到元素后边: 对象1.after(对象2)： 将对象2添加到对象1后边。对象1和对象2是兄弟关系
        			6. before():添加元素到元素前边 :对象1.before(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系
        			7. e.insertAfter(a)  e a ->Position swap
        			8. e.insertBefore(a)  a e ->Position swap
        			9. remove():移除元素
        			10. empty():清空元素的所有后代元素。

21. JSON: JavaScript Object Notation
        a>  JSON is a lightweight data format
                 is "self-describing" and easy to understand
                 is language independent *
        b>  JSON:   Key value pair
                    separate by ","
                    {} save

        c> JSON using jS syntax but JSON format is text only. It can easily be sent to and from a server. And used as a data format by any programming language.

        d> JSON.parse(): Use the JavaScript function JSON.parse() to convert text into a JavaScript object


        e>

        f>



22. AJAX: Asynchronous JavaScript and XML
        a>  Web applications are able to make quick, incremental updates to the user interface without reloading the entire browser page
        b>  Advantage: Makes the application faster and more responsive to user actions.
        c>  In Query:
            $.get, $.post, $.ajax

23. Password settle: Feb_25_Strength_pass: cloud flare -> zxcvbn: contains the strength of password.

24. XML: Extensible Markup Language
        a> Different between XML and HTML:
            1. Tag is self-descriptive of XML, not predefined like HTML.
            2. XML is used to store and transport data, HTML is used for display data.

        b>  XML is a W3c Recommendation.

        c> File format:
            1> First Line must be declaration   <?xml version="1.0" encoding="UTF-8"?>
            2> Must contain only one root tag.
            3> Must contain </tag>, close tag.

        d>  Other format
            1> Capitalized
            2> id is unique

        f>  CDATA area: Just like document.write()

        g>

        h>

        i>
        j>
        k>

25.  reader.onload = (function(theFile))(f) -> f trans to theFile
        console.log((function (x){return x*x;})(2));

